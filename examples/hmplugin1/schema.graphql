# This sample schema shows how to use the functions defined in this plugin.

# this directive will eventually be built-in, and will replace @lambda
directive @hm_function(name: String, args: [String!]) on FIELD_DEFINITION

type Query {
  add(a: Int!, b: Int!): Int! @lambda @hm_function
  getFullName(firstName: String!, lastName: String!): String! @lambda @hm_function
  getPeople: [Person!]! @lambda @hm_function
  queryPeople1: [Person!]! @lambda @hm_function
  queryPeopleWithVars(firstName: String!, lastName: String!): [Person!]! @lambda @hm_function
  queryPeople2: [Person!]! @lambda @hm_function
  getRandomPerson: Person! @lambda @hm_function
  testError: Int! @lambda @hm_function
  testClassifier(modelId: String!, text: String!): ClassificationResult! @lambda @hm_function
  testMultipleClassifier(modelId: String!, ids: String!, texts: String!): [ClassificationObject!]! @lambda @hm_function
}

type Mutation {
  newPerson1(firstName: String!, lastName: String!): String! @lambda @hm_function
  newPerson2(firstName: String!, lastName: String!): String! @lambda @hm_function
}

type Person {
    id: ID!
    firstName: String! @search(by: [hash])
    lastName: String! @search(by: [hash])
    fullName: String @lambda @hm_function(name: "getFullName", args: ["firstName", "lastName"])
}

type ClassificationObject @remote {
  id: String
  text: String
  result: ClassificationResult
}

type ClassificationResult @remote {
  probabilities: [ClassificationProbability]
}

type ClassificationProbability @remote {
  label: String
  probability: Float
}
